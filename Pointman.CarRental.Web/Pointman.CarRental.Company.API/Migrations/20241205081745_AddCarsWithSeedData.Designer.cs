// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pointman.CarRental.Company.API.Entities;

#nullable disable

namespace Pointman.CarRental.Company.API.Migrations
{
    [DbContext(typeof(CarRentalContext))]
    [Migration("20241205081745_AddCarsWithSeedData")]
    partial class AddCarsWithSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pointman.CarRental.Company.API.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Porsche",
                            Model = "Porsche 911 GT3"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Lamborghini",
                            Model = "Lamborghini Huracan Performante"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Audi",
                            Model = "Audi R8 Performance"
                        });
                });

            modelBuilder.Entity("Pointman.CarRental.Company.API.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetupId")
                        .HasColumnType("int");

                    b.Property<int>("RentCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentCompanyId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Pointman.CarRental.Company.API.Entities.RentCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RentCompanies");
                });

            modelBuilder.Entity("Pointman.CarRental.Company.API.Entities.Location", b =>
                {
                    b.HasOne("Pointman.CarRental.Company.API.Entities.RentCompany", "RentCompany")
                        .WithOne("Location")
                        .HasForeignKey("Pointman.CarRental.Company.API.Entities.Location", "RentCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentCompany");
                });

            modelBuilder.Entity("Pointman.CarRental.Company.API.Entities.RentCompany", b =>
                {
                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
